@startuml
'https://plantuml.com/class-diagram

package EventsChannel {
   interface Broker<Item> #aliceblue ##[dotted]blue {
        addItem(item: Item)
   }

   package Events {
       class EventsBroker<Event> #green {
         - subscribers: Subscriber[]
         addItem(event: Event)
       }


       interface Event<DataType> #aliceblue ##[dotted]blue {
         getData(): DataType
       }

       interface Parser #aliceblue ##[dotted]blue {
           parse(event: Event): any
       }

       package Commands {
            class CommandEvent<DataType> {}

            class CommandParser {
               parse(command: string): Command
            }

            interface Command #aliceblue ##[dotted]blue {
               do()
            }

            CommandParser o-> Command
       }

       package Notifications {
           class NotificationParser {
              parse(text: string): Notification
           }

           class NotificationEvent<DataType> {}
           interface Notification #aliceblue ##[dotted]blue
       }

       class EventsSubscriber {}
   }

   CommandEvent ..|> Event
   NotificationEvent ..|> Event
   CommandParser ..|> Parser
   Parser <|.. NotificationParser
   NotificationParser o-up-> Notification

   interface Subscriber<Item> #aliceblue ##[dotted]blue {
      update(item: Item)
      receive(): Item
   }
}

Subscriber o..> Event
EventsBroker o..> Event
Subscriber <..lefto EventsBroker
EventsBroker ..|> Broker
EventsSubscriber ..|> Subscriber

@enduml